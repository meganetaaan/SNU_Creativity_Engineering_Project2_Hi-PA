<html>
  <head>
    <meta charset="UTF-8">
    <title>HiPA - Presentation Assistant</title>
      
    <!--Importing bootstrap -->
     <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

    <!-- Import a dependent file -->
    <script src="/public/lib/jquery/jquery-3.2.0.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <!-- Import a hifive framework -->
    <link type="text/css" rel="stylesheet" href="/public/lib/h5/h5.css">
    <script src="/public/lib/h5/ejs-h5mod.js"></script>
    <script src="/public/lib/h5/h5.dev.js"></script>

    <!-- Import reveal.js fremework -->
    <link rel="stylesheet" href="/public/lib/reveal/css/reveal.css">
    <link rel="stylesheet" href="/public/lib/reveal/css/theme/bulma.css">
    <script src="/public/lib/reveal/lib/js/head.min.js"></script>
    <script src="/public/lib/reveal/js/reveal.js"></script>

    <!-- Theme used for syntax highlighting of code -->
    <link rel="stylesheet" href="/public/lib/reveal/lib/css/zenburn.css">
    <!-- Import css framework -->

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.4.0/css/bulma.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/public/lib/tipped-4.6.0-light/css/tipped/tipped.css">
    <!-- Theme used for syntax highlighting of code -->
    <link rel="stylesheet" href="/public/lib/reveal/lib/css/zenburn.css">


    <script src="/public/lib/tipped-4.6.0-light/js/tipped/tipped.js"></script>
    <!-- clmtrckr -->
    <% if (isPresenter) { %>
      <script src="/public/lib/clmtrackr/b4_demo.js"></script>
      <script src="/public/lib/clmtrackr/utils.js"></script>
      <script src="/public/lib/clmtrackr/numeric-1.2.6.min.js"></script>
      <script src="/public/lib/clmtrackr/mosse.js"></script>
      <script src="/public/lib/clmtrackr/jsfeat-min.js"></script>
      <script src="/public/lib/clmtrackr/frontalface.js"></script>
      <script src="/public/lib/clmtrackr/jsfeat_detect.js"></script>
      <script src="/public/lib/clmtrackr/left_eye_filter.js"></script>
      <script src="/public/lib/clmtrackr/right_eye_filter.js"></script>
      <script src="/public/lib/clmtrackr/nose_filter.js"></script>
      <script src="/public/lib/clmtrackr/models/model_pca_20_svm.js"></script>
      <script src="/public/lib/clmtrackr/clm.js"></script>
      <script src="/public/lib/clmtrackr/svmfilter_webgl.js"></script>
      <script src="/public/lib/clmtrackr/svmfilter_fft.js"></script>
      <script src="/public/lib/clmtrackr/mossefilter.js"></script>
      <script src="/public/lib/clmtrackr/Stats.js"></script>
    <% } %>

    <% if (isPresenter) { %>
      <script src="/public/javascripts/config-presenter.js"></script>
    <% } else { %>
      <script src="/public/javascripts/config-audience.js"></script>
    <% } %>
    <!-- hifive model -->
    <script src="/public/javascripts/model/QuestionDataModel.js"></script>
    <!-- hifive logic -->
    <script src="/public/javascripts/logic/QuestionListLogic.js"></script>
    <script src="/public/javascripts/logic/ScriptLogic.js"></script>
    <script src="/public/javascripts/logic/TimeLogic.js"></script>
    <!-- hifive controller -->
    <script src="/public/javascripts/controller/QuestionListController.js"></script>
    <script src="/public/javascripts/controller/SlideController.js"></script>
    <script src="/public/javascripts/controller/ScriptController.js"></script>
    <script src="/public/javascripts/controller/TooltipController.js"></script>
    <script src="/public/javascripts/controller/FeedbackController.js"></script>
    <script src="/public/javascripts/controller/TimeController.js"></script>
    <script src="/public/javascripts/controller/AlertController.js"></script>
    <script src="/public/javascripts/controller/PageController.js"></script>
    <script>
      var parentController = null;
      $(function() {
        parentController = h5.core.controller('body', hipa.controller.PageController);
      });
    </script>

    <link type="text/css" rel="stylesheet" href="/public/stylesheets/main.css">

    
    <style>
        
      @import url(https://fonts.googleapis.com/css?family=Lato:300italic,700italic,300,700);
      body {
        font-family: 'Lato';
        
        margin: 0px auto;
      }
      #overlay {
          display: none;
        position: absolute;
        top: 0px;
        left: 0px;
        -o-transform : scaleX(-1);
        -webkit-transform : scaleX(-1);
        transform : scaleX(-1);
        -ms-filter : fliph; /*IE*/
        filter : fliph; /*IE*/
        
      }
      #videoel {
        -o-transform : scaleX(-1);
        -webkit-transform : scaleX(-1);
        transform : scaleX(-1);
        -ms-filter : fliph; /*IE*/
        filter : fliph; /*IE*/
        
      }
      #video-container {
          display: inline;
        position : relative;
        width : 370px;
        /*margin : 0px auto;*/
      }
      #content {
        margin-left : auto;
        margin-right : auto;
      }
      h2 {
        font-weight : 400;
      }
      .btn {
        font-family: 'Lato';
        font-size: 16px;
      }
      #controls {
        text-align : center;
      }
      #emotion_container {
        width: 600px;
      }
      #emotion_icons {
        height: 10px;
        padding-left: 40px;
      }
      .emotion_icon {
        width : auto;
        height : 40px;
        margin-top: 5px;
        margin-left : 13px;
      }
      #emotion_chart, #emotion_icons {
        margin: 0 auto;
        width : 400px;
      }
      #icon1, #icon2, #icon3, #icon4, #icon5, #icon6 {
        visibility : hidden;
      }
      /* d3 */
      .bar {
        fill : steelblue;
        fill-opacity : .9;
      }
        
        #chat{
          background-color: white;
        height:300px;
            margin:auto;
          position: relative;
          overflow-y: scroll;
          border-style: solid;
          border-color: grey;
          border-width:1px;
        }
      form{
          background-color: white;
          bottom: 270px;
          right: 390px;
          
      }
      .form-group{  
          background-color: white;
         
        }
      .form-control{
          height: 30px;
          position: relative;
          border-color:grey;
          border-style:solid;
          border-width:1px;
      }
      .Onlineusers{
        left: 20px;
        position: relative;
        }
      .list-group{
        overflow-y: scroll;
        height: 50px;
        border-style: solid;
        border-color: grey;
        border-width:1px;
        position:relative;
      }
      #Onlineusers{
        display: none;
      }
      #minichat{
        display: none;
      }   
      #profile-button{
        right: -225px;
        position: relative;
      }


    </style>

  </head>
  <body>
 
      <script>
      // getUserMedia only works over https in Chrome 47+, so we redirect to https. Also notify user if running from file.
      if (window.location.protocol == "file:") {
        alert("You seem to be running this example directly from a file. Note that these examples only work when served from a server or localhost due to canvas cross-domain restrictions.");
      } else if (window.location.hostname !== "localhost" && window.location.protocol !== "https:"){
        window.location.protocol = "https";
      }
    </script>
    <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-32642923-1']);
      _gaq.push(['_trackPageview']);
      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    </script>  
      <script src="../public/lib/clmtrackr/utils.js"></script>
    <script src="../public/lib/clmtrackr/clmtrackr.js"></script>
    <script src="../public/lib/clmtrackr/models/model_pca_20_svm.js"></script>
    <script src="../public/lib/clmtrackr/Stats.js"></script>
    <script src="../public/lib/clmtrackr/d3.min.js"></script>
    <script src="../public/lib/clmtrackr/emotion_classifier.js"></script>
    <script src="../public/lib/clmtrackr/emotionmodel.js"></script>
      
        
      <div class="row">
        <div class="col-lg-9">
            <div id="slide-container">
                <div id="slide-subcontainer" class="sl-root decks export loaded ua-phantomjs reveal-viewport theme-font-montserrat theme-color-white-blue">
                </div>
            </div>
            
            <div id="script-container">
                <div id="script-control"></div>
                <div id="script-box">
                    <div id="script-result"></div>
                    <div id="script-face"></div>
                     <div id="content">
                         
                         <% if( isPresenter == true){ %>
                         <input class="btn" type="button" value="Emotions" onclick="testMethod('emotion')" id="emotion-chat"></input>
                
            <% } else{ %>
               <!--<h2>Emotion detection example</h2>
      <p>This a test of emotion detection based on parameter output from <em>clmtrackr</em>.</p>-->
      <div id="video-container">
        <video id="videoel" width="300" height="200" preload="auto" loop playsinline autoplay>
        </video>
        <canvas id="overlay" width="300" height="200"></canvas>
      </div>
      <div id="emotion_container">
        <div id="emotion_icons">
          <img class="emotion_icon" id="icon1" src="../public/lib/clmtrackr/media/icon_angry.png">
          <img class="emotion_icon" id="icon2" src="../public/lib/clmtrackr/media/icon_disgusted.png">
          <img class="emotion_icon" id="icon3" src="../public/lib/clmtrackr/media/icon_fear.png">
          <img class="emotion_icon" id="icon4" src="../public/lib/clmtrackr/media/icon_sad.png">
          <img class="emotion_icon" id="icon5" src="../public/lib/clmtrackr/media/icon_surprised.png">
          <img class="emotion_icon" id="icon6" src="../public/lib/clmtrackr/media/icon_happy.png">
        </div>
        <div id='emotion_chart'>
    
        </div>
      </div>
      <div id="controls">
        <input class="btn" type="button" value="wait, loading video" disabled="disabled" onclick="startVideo()" id="startbutton"></input>
        <input class="btn" type="button" value="wait, loading video" onclick="stopVideo()" id="stopbutton"></input>
        <input class="btn" type="button" value="Emotions" onclick="testMethod('emotion')" id="emotion-chat"></input>
      </div>
          <script>
        var vid = document.getElementById('videoel');
        var vid_width = vid.width;
        var vid_height = vid.height;
        var overlay = document.getElementById('overlay');
        var overlayCC = overlay.getContext('2d');
        /********** check and set up video/webcam **********/
        function enablestart() {
          var startbutton = document.getElementById('startbutton');
          startbutton.value = "start";
          startbutton.disabled = null;

          var stopbutton = document.getElementById('stopbutton');
          stopbutton.value = "pause";
          stopbutton.disabled = null;
        }

        function adjustVideoProportions() {
          // resize overlay and video if proportions are different
          // keep same height, just change width
          var proportion = vid.videoWidth/vid.videoHeight;
          vid_width = Math.round(vid_height * proportion);
          vid.width = vid_width;
          overlay.width = vid_width;
        }
        function gumSuccess( stream ) {
          // add camera stream if getUserMedia succeeded
          if ("srcObject" in vid) {
            vid.srcObject = stream;
          } else {
            vid.src = (window.URL && window.URL.createObjectURL(stream));
          }
          vid.onloadedmetadata = function() {
            adjustVideoProportions();
            vid.play();
          }
          vid.onresize = function() {
            adjustVideoProportions();
            if (trackingStarted) {
              ctrack.stop();
              ctrack.reset();
              ctrack.start(vid);
            }
          }
        }
        function gumFail() {
          alert("There was some problem trying to fetch video from your webcam. If you have a webcam, please make sure to accept when the browser asks for access to your webcam.");
        }
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;
        // check for camerasupport
        if (navigator.mediaDevices) {
          navigator.mediaDevices.getUserMedia({video : true}).then(gumSuccess).catch(gumFail);
        } else if (navigator.getUserMedia) {
          navigator.getUserMedia({video : true}, gumSuccess, gumFail);
        } else {
          alert("This demo depends on getUserMedia, which your browser does not seem to support. :(");
        }
        vid.addEventListener('canplay', enablestart, false);
        /*********** setup of emotion detection *************/
        // set eigenvector 9 and 11 to not be regularized. This is to better detect motion of the eyebrows
        pModel.shapeModel.nonRegularizedVectors.push(9);
        pModel.shapeModel.nonRegularizedVectors.push(11);
        var ctrack = new clm.tracker({useWebGL : true});
        ctrack.init(pModel);
        var trackingStarted = false;
        function startVideo() {
          // start video
          vid.play();
          // start tracking
          ctrack.start(vid);
          trackingStarted = true;
          // start loop to draw face
          drawLoop();
        }

        function stopVideo() {
          // start video
          vid.pause();
          // start tracking
          ctrack.stop(vid);
          trackingStarted = false;
          // start loop to draw face
         
        }
          
         var happy =  0;
          var disguised = 0;
            var d = new Date();  
            var  timer = d.getTime();
              
          
        function drawLoop() {
          requestAnimFrame(drawLoop);
          overlayCC.clearRect(0, 0, vid_width, vid_height);
          //psrElement.innerHTML = "score :" + ctrack.getScore().toFixed(4);
          if (ctrack.getCurrentPosition()) {
            ctrack.draw(overlay);
          }
          var cp = ctrack.getCurrentParameters();
          var er = ec.meanPredict(cp);
          if (er) {
            updateData(er);
              
              d = new Date();
              cur_time = d.getTime();
              
                  
              if(er[1].value>0.6 & disguised==0 & cur_time>timer){
                  disguised = 1;
                  timer = timer+10000;
                   socket.emit('message', {'message': 'bored', 'roomname': 'emotion', 'username':<%- JSON.stringify(username) %>});
              }
              if(er[1].value<0.2 & disguised==1 & cur_time>timer){
                  disguised = 0;
                       timer = timer+10000;
//                  socket.emit('message', {'message': 'unhappy', 'roomname': 'emotion', 'username':<%- JSON.stringify(username) %>});
              }
              if(er[5].value>0.6 & happy==0 & cur_time>timer){
                  happy = 1;
                  timer = timer+10000;
                  
                   socket.emit('message', {'message': 'happy', 'roomname': 'emotion', 'username':<%- JSON.stringify(username) %>});
              }
              if(er[5].value<0.2 & happy==1 & cur_time>timer){
                  happy = 0;
                       timer = timer+10000;
//                  socket.emit('message', {'message': 'unhappy', 'roomname': 'emotion', 'username':<%- JSON.stringify(username) %>});
              }
              
              
              
            for (var i = 0;i < er.length;i++) {
              if (er[i].value > 0.4) {
                document.getElementById('icon'+(i+1)).style.visibility = 'visible';
                  
              } else {
                document.getElementById('icon'+(i+1)).style.visibility = 'hidden';
                  
              }
            }
          }
        }
       
        var ec = new emotionClassifier();
        ec.init(emotionModel);
        var emotionData = ec.getBlank();
        /************ d3 code for barchart *****************/
        var margin = {top : 20, right : 20, bottom : 10, left : 40},
          width = 400 - margin.left - margin.right,
          height = 100 - margin.top - margin.bottom;
        var barWidth = 30;
        var formatPercent = d3.format(".0%");
        var x = d3.scale.linear()
          .domain([0, ec.getEmotions().length]).range([margin.left, width+margin.left]);
        var y = d3.scale.linear()
          .domain([0,1]).range([0, height]);
        var svg = d3.select("#emotion_chart").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        svg.selectAll("rect").
          data(emotionData).
          enter().
          append("svg:rect").
          attr("x", function(datum, index) { return x(index); }).
          attr("y", function(datum) { return height - y(datum.value); }).
          attr("height", function(datum) { return y(datum.value); }).
          attr("width", barWidth).
          attr("fill", "#2d578b");
        svg.selectAll("text.labels").
          data(emotionData).
          enter().
          append("svg:text").
          attr("x", function(datum, index) { return x(index) + barWidth; }).
          attr("y", function(datum) { return height - y(datum.value); }).
          attr("dx", -barWidth/2).
          attr("dy", "1.2em").
          attr("text-anchor", "middle").
          text(function(datum) { return datum.value;}).
          attr("fill", "white").
          attr("class", "labels");
        svg.selectAll("text.yAxis").
          data(emotionData).
          enter().append("svg:text").
          attr("x", function(datum, index) { return x(index) + barWidth; }).
          attr("y", height).
          attr("dx", -barWidth/2).
          attr("text-anchor", "middle").
          attr("style", "font-size: 12").
          text(function(datum) { return datum.emotion;}).
          attr("transform", "translate(0, 18)").
          attr("class", "yAxis");
        function updateData(data) {
          // update
          var rects = svg.selectAll("rect")
            .data(data)
            .attr("y", function(datum) { return height - y(datum.value); })
            .attr("height", function(datum) { return y(datum.value); });
          var texts = svg.selectAll("text.labels")
            .data(data)
            .attr("y", function(datum) { return height - y(datum.value); })
            .text(function(datum) { return datum.value.toFixed(1);});
          // enter
          rects.enter().append("svg:rect");
          texts.enter().append("svg:text");
          // exit
          rects.exit().remove();
          texts.exit().remove();
        }
        /******** stats ********/
        stats = new Stats();
        stats.domElement.style.position = 'absolute';
        stats.domElement.style.top = '0px';
        document.getElementById('container').appendChild( stats.domElement );
        // update stats on every iteration
        document.addEventListener('clmtrackrIteration', function(event) {
          stats.update();
        }, false);
      </script>
  
                
              
            <% } %>
      
    
    </div>
 
                </div>
            </div>
        </div>

         <div> <div id = "profile-button">
  <a href="/logout"><input type="submit" class="btn btn-primary" value="logout" id = "Logout"/></a>
    </div>
    <div>
    
        <div class="col-lg-3">   
            <div class="container">
       

        <div id="Onlineusers">
        <h3>Online Room Users</h3>
              <ul class="list-group" id="users"></ul>
          </div>
        
          
      <div id="minichat" >
        <div style=" border-style:solid; border-color:grey; height: 250px; right: 0px; position:relative; width: 270px; overflow-y: scroll;" id="txtarea">
   
        <dl id="txtappend">
        </dl>
      </div>

      <br />
      <form id="messageForm">

      <textarea  class="form-control" style="bottom: 0px; height: 60px;  width: 270px; right: 0px; position:relative;" type="text" id="txt"></textarea>
      <input id="btn" style="width: 270px; bottom: -10px; height: 40px; right:0px; position:relative;" type="submit"  class="btn btn-primary" value="Enter Message" />

      </form>
      
      <button id = "gotoTimeline" style="width: 270px; bottom: -25px; height: 40px; right:3px; position:relative;" onclick="gotoTimeline()" class="btn btn-primary" >Back to timeline</button>
      </div>

        

        
            <div id="question-container">
                <div id="question-list-container">
                </div>
                <% if( isPresenter == true){ %>
                <div id="question-form-container-presenter">
                
            <% } else{ %>
             
                <div id="question-form-container">
              
            <% } %>
                  </div>
            </div>
            <div id="feedback-container">
      </div>

        </div>
     </div>


   
      <script>
      $(document).ready(function(){
          $('#0').click(function(){
          });
      });
            </script>
    <script src="http://code.jquery.com/jquery-latest.min.js">
    </script>
    <script src="/socket.io/socket.io.js"></script> 
          <script>
        var socket = io.connect();
        var $messageForm = $('#messageForm');
        var $message = $('#message');
        var $chat = $('#chat');
        
   
        var $users = $('#users');
        var $Onlineusers = $('#Onlineusers');
        var $minichat = $('#minichat');
        
        
      
      var variable;
              
      function testMethod(click_id){
      var $messageArea = $('#messageArea'); 
        variable = click_id;

         socket.emit('join', {'roomname': click_id, 'username': <%- JSON.stringify(username) %>});
   
          socket.once('join', function(data){

          for(i = 0; i < data.length; i++)
          {
              $('#txtappend').append('<dd style="margin: 0px;">'+ data[i] + '</dd>');
          }
              $('#feedback-container').hide(500);
              $('#question-container').hide(500);
              $minichat.show(500);
              $Onlineusers.show(500);
              
            });
          }


        function gotoTimeline(){    

          socket.emit('leave chat', {'roomname': variable, 'username': <%- JSON.stringify(username) %>});
          socket.once('leave chat', function(data){

          $('#question-container').show(500);
                 $Onlineusers.hide(500);
                 $('#feedback-container').show(500);
                 $minichat.hide(500);
                  $('#txtappend').empty();
            });    
        }    


         $(function(){
             $('#btn').click(function(e){
            e.preventDefault();

            socket.emit('message', {'message': $('#txt').val(), 'roomname': variable, 'username':<%- JSON.stringify(username) %>});
            $('#txt').val('');
            });

          socket.on('message', function(data){

            $('#txtappend').append('<dd style="margin: 0px;">'+ data.user + ': ' +  data.msg + '</dd>');
                 });
            });

          socket.on('get users', function(data){
            var html = '';
            for(i = 0; i < data.length; i++){
              html += '<li class="list-group-item">'+data[i]+'</li>';
              }
              $users.html(html);
          });

      </script>
  </body>
</html>
